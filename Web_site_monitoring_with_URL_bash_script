#!/bin/bash

################Files to be created before starting exicution####################
# sudo apt-get install alsa alsa-utils						#
# sudo apt-get install postfix mailutils                                        #
# https://kifarunix.com/configure-postfix-to-use-gmail-smtp-on-ubuntu-18-04/    #
# mkdir -p $HOME/scripts							#
# touch $HOME/scripts/URL_File							#
# touch $HOME/scripts/alert_Data						#
# touch /tmp/http								#
# Download alert.wav file and copy it into $HOME/scripts directory		#
#################################################################################

####### checking existing process and creating temp files for URLs###############
Proc=$(ps -ef | grep http_alerts.sh | wc -l)
number=$(ps -ef | grep http_alerts.sh)
if [ $Proc -gt 3 ]
then
	echo "Script Already Running. Please kill PID($number) and restart"
else
FILE="$HOME/scripts/URL_File"
myfileval=1
####### checking existing process and finding temp files for URLs###############
echo "############ SCRIPT STARTED WORKING ################"
echo "############ SCRIPT STARTED WORKING ################" >> $HOME/scripts/alert_Data
echo " " >> $HOME/scripts/alert_Data
####### Continues Loop to check the URLs without break           ###############
while true
do
filename="$HOME/scripts/URL_File" ### file path
while read -r line; do
        echo $line > /tmp/http ### inserting each line data to temparary file
		### Checking Internet Connection #######
		while true
		do
			if ping -q -c 1 -W 1 8.8.8.8 >/dev/null; 
		then   
			break
		else 
			echo "You are not connected to internet. Please wait"
			sleep 5  
		fi
		done 
	myval=1
	i=$((i+1))
	j=7
	k=$(shuf -i 1-${j} -n 1)
	l=30
	i=$(($l+$k)) ##### Color code 31 to 37
	echo ""
	echo ""
	URL=$(cat /tmp/http |  awk -v "val=$myval" 'NR==val {print $3}') ### example: myabcd.com or 123.123.123.111
	Server_State=$(cat /tmp/http |  awk -v "val=$myval" 'NR==val {print $2}') ### example: this_is_myabcd_site
	val1=$(cat /tmp/http | awk -v "val=$myfileval" 'NR==val {print $1}') ### example: 0 or 1
	val2=$(cat /tmp/http | awk -v "val=$myfileval" 'NR==val {print $4}') ### example: 123.123.123.111 
	val3=$(cat /tmp/http | awk -v "val=$myfileval" 'NR==val {print $5}') ### example: 123.123.123.222
echo "\e[1;${i}m-------------------------------------------------------------------\e[0m"
echo "\e[1;${i}m| Cheking URL :   $URL                     			   \e[0m"
echo "\e[1;${i}m-------------------------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
echo "\e[1;${i}m| Cheking URL :   $URL                                             \e[0m" >> $HOME/scripts/alert_Data
DATA=$(date) ### time stamp 
if [ $val1 -eq 0 ]
then
	dname=$(nslookup $URL | awk '/^Address: /{print $2}') ### getting domain name Public IPs
	for dname_i in $dname
	do
		#echo "first for loop dname_i is $dname_i"
		dname_url="http://$dname_i/" ### Making Public IP as http URL
		code=$(curl -s -o /dev/null -w "%{http_code}" $dname_url)  ### getting public IP response	
		if [ $code -eq 200 -o $code -eq 301 -o $code -eq 302 ] ### checking with sucessful response codes
		then 
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m"
		echo "\e[1;${i}m| UP TIME     :   $DATA                            \e[0m"
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m"
		echo "\e[1;${i}m| Server State:   $Server_State                    \e[0m" 
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m" 
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m| UP TIME     :   $DATA                                            \e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m| Server State:   $Server_State                                    \e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		break
		elif [ $code -eq 404 -o $code -eq 500  -o $code -eq 000 ] ### checking with error response codes
		then 
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m"
		echo "\e[1;${i}m| URL IS DOWN :   $URL                                             \e[0m"
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m"
		echo "\e[1;${i}m| DOWN TIME   :   $DATA                                            \e[0m"
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m"
		echo "\e[1;${i}m| HTTP TIME   :   $code                                            \e[0m"
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m"
		echo "\e[1;${i}m| Server State:   $Server_State                                    \e[0m"
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m| URL IS DOWN :   $URL                                             \e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m| DOWN TIME   :   $DATA                                            \e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m| HTTP CODE   :   $code                                            \e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m| Server State:   $Server_State                                    \e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		aplay $HOME/scripts/alert.wav 2> /dev/null ### On failure buzzer will sound
		/usr/bin/truncate -s 0 /tmp/$Server_State  ### truncate the file with server failure count data
		echo " Dear Admin Team \n The $URL is DOWN for the State $Server_State. The HTTP response code is $code " | mail -s "$Server_State is down" -a "From: from_mail_id@gmail.com" your_admin_1@gmail.com,your_admin_2@gmail.com >> /dev/null   ### On failure sending mail
fi
done
else
 	for ipadd in $URL $val2 $val3
	do
		dname_url="http://$ipadd/" ### making URL with public IP
		dname_code=$(curl -s -o /dev/null -w "%{http_code}" $dname_url)   ### getting response code
		if [ $dname_code -eq 200 -o $dname_code -eq 301 -o $dname_code -eq 302 ] ### validating response code
		then
		echo "\e[1;${i}m---------------------------------------------------\e[0m"
		echo "\e[1;${i}m| UP TIME     :   $DATA                            \e[0m"
		echo "\e[1;${i}m---------------------------------------------------\e[0m"
		echo "\e[1;${i}m| Server State:   $Server_State                    \e[0m" 
		echo "\e[1;${i}m---------------------------------------------------\e[0m" 
		echo "\e[1;${i}m---------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m| UP TIME     :   $DATA                            \e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m---------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m| Server State:   $Server_State                    \e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m---------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		break
		elif [ $code -eq 404 -o $code -eq 500 -o $code -eq 000  ] ### checking with error response codes
		then
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m"
		echo "\e[1;${i}m| URL IS DOWN :   $URL                             \e[0m"
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m"
		echo "\e[1;${i}m| DOWN TIME   :   $DATA                            \e[0m"
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m"
		echo "\e[1;${i}m| HTTP TIME   :   $code                            \e[0m"
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m"
		echo "\e[1;${i}m| Server State:   $Server_State                    \e[0m"
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m| URL IS DOWN :   $URL                             \e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m| DOWN TIME   :   $DATA                            \e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m| HTTP CODE   :   $code                            \e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m| Server State:   $Server_State                    \e[0m" >> $HOME/scripts/alert_Data
		echo "\e[1;${i}m-------------------------------------------------------------------\e[0m" >> $HOME/scripts/alert_Data
		aplay $HOME/scripts/alert.wav 2> /dev/null ### On failure buzzer will sound
		/usr/bin/truncate -s 0 /tmp/$Server_State  ### truncate the file with server failure count data
		echo " Dear Admin Team \n The $URL is DOWN for the State $Server_State. The HTTP response code is $code " | mail -s "$Server_State is down" -a "From: from_mail_id@gmail.com" your_admin_1@gmail.com,your_admin_2@gmail.com >> /dev/null   ### On failure sending mail
		fi
	done
		fi
done < "$filename"
done
fi
#######################################################################################################################################################
#The content of $HOME/scripts/URL_File is as below
#Please remove "#" and Headline titles. Each parameter will be read by the difrence of spaces.
#Domain(0)/IPstatus(1)		Remarks				URLoftheSite			PublicIP_1		PublicIP_2	
#     1				this_is_myexamplesite		http://myexamplesite.com 	123.123.123.111		123.123.123.222







